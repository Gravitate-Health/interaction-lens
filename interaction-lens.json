{
  "resourceType": "Library",
  "meta": {
    "profile": [
      "http://hl7.eu/fhir/ig/gravitate-health/StructureDefinition/lens"
    ]
  },
  "extension": [
    {
      "url": "http://hl7.eu/fhir/ig/gravitate-health/StructureDefinition/lee-version",
      "valueString": "dev"
    }
  ],
  "url": "https://gravitate-health.lst.tfo.upm.es/ips/api/fhir/Library/592",
  "identifier": [
    {
      "system": "http://gravitate-health.lst.tfo.upm.es",
      "value": "interaction-lens"
    }
  ],
  "version": "0.0.1",
  "name": "interaction-lens",
  "date": "2024-06-12T13:40:03.690Z",
  "title": "Interactions",
  "status": "draft",
  "experimental": true,
  "type": {
    "coding": [
      {
        "code": "logical-library"
      }
    ]
  },
  "publisher": "Gravitate Health Project - UPM Team",
  "contact": [
    {
      "name": "Gravitate Health",
      "telecom": [
        {
          "system": "url",
          "value": "https://www.gravitatehealth.eu/"
        }
      ]
    }
  ],
  "description": "A lens that highlight any information related to interactions between other mediciones or ePIs",
  "jurisdiction": [
    {
      "coding": [
        {
          "code": "US",
          "system": "urn:iso:std:iso:3166"
        }
      ]
    }
  ],
  "purpose": "Clarify the important things related to interactions between other ePIs in the ePI provided",
  "usage": "This lens requires a preprocessed ePI, and an IPS to work",
  "copyright": "Â© 2024 Gravitate Health",
  "parameter": [
    {
      "use": "in",
      "documentation": "parameter if it exists",
      "type": "CodeableConcept"
    }
  ],
  "content": [
    {
      "contentType": "application/javascript",
      "data": "bGV0IHB2RGF0YSA9IHB2OwpsZXQgaHRtbERhdGEgPSBodG1sOwoKbGV0IGVwaURhdGEgPSBlcGk7CmxldCBpcHNEYXRhID0gaXBzOwoKbGV0IGdldFNwZWNpZmljYXRpb24gPSAoKSA9PiB7CiAgICByZXR1cm4gIjEuMC4wIjsKfTsKCmxldCBlbmhhbmNlID0gYXN5bmMgKCkgPT4gewogICAgLy8gUHJvdmVzIHRoYXQgSVBTIGV4aXN0cwogICAgaWYgKGlwcyA9PSAiIiB8fCBpcHMgPT0gbnVsbCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiRmFpbGVkIHRvIGxvYWQgSVBTOiB0aGUgTEVFIGlzIGdldHRpbmcgYSBlbXB0eSBJUFMiKTsKICAgIH0KCiAgICAvLyBJbnN0YW50aWF0ZXMgdGhlIGFycmF5IG9mIGNvbmRpdGlvbiBjb2RlcwogICAgbGV0IGFycmF5T2ZJbmdyZWRpZW50Q29kZXMgPSBbXTsKCiAgICAvLyBJdGVyYXRlcyB0aHJvdWdoIHRoZSBJUFMgZW50cnkgc2VhcmNoaW5nIGZvciBjb25kaXRpb25zCiAgICBpcHMuZW50cnkuZm9yRWFjaCgoZWxlbWVudCkgPT4gewogICAgICAgIGlmIChlbGVtZW50LnJlc291cmNlLnJlc291cmNlVHlwZSA9PSAiTWVkaWNhdGlvbiIpIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnQucmVzb3VyY2UuaW5ncmVkaWVudCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQucmVzb3VyY2UuaW5ncmVkaWVudC5mb3JFYWNoKChpbmdyZWRpZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGluZ3JlZGllbnQuaXRlbUNvZGVhYmxlQ29uY2VwdCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5ncmVkaWVudC5pdGVtQ29kZWFibGVDb25jZXB0LmNvZGluZy5mb3JFYWNoKChjb2RpbmcpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJJbmdyZWRpZW50OiAiICsgY29kaW5nLmNvZGUgKyAiIC0gIiArIGNvZGluZy5zeXN0ZW0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheU9mSW5ncmVkaWVudENvZGVzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvZGluZy5jb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5c3RlbTogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIC8vIElmIHRoZXJlIGFyZSBubyBjb25kaXRpb25zLCByZXR1cm4gdGhlIGVQSSBhcyBpdCBpcwogICAgaWYgKGFycmF5T2ZJbmdyZWRpZW50Q29kZXMubGVuZ3RoID09IDApIHsKICAgICAgICByZXR1cm4gaHRtbERhdGE7CiAgICB9CgogICAgLy8gZVBJIHRyYXNsYXRpb24gZnJvbSB0ZXJtaW5vbG9neSBjb2RlcyB0byB0aGVpciBodW1hbiByZWRhYmxlIHRyYW5zbGF0aW9ucyBpbiB0aGUgc2VjdGlvbnMKICAgIGxldCBjb21wb3NpdGlvbnMgPSAwOwogICAgbGV0IGNhdGVnb3JpZXMgPSBbXTsKICAgIGVwaS5lbnRyeS5mb3JFYWNoKChlbnRyeSkgPT4gewogICAgICAgIGlmIChlbnRyeS5yZXNvdXJjZS5yZXNvdXJjZVR5cGUgPT0gIkNvbXBvc2l0aW9uIikgewogICAgICAgICAgICBjb21wb3NpdGlvbnMrKzsKICAgICAgICAgICAgLy9JdGVyYXRlZCB0aHJvdWdoIHRoZSBDb25kaXRpb24gZWxlbWVudCBzZWFyY2hpbmcgZm9yIGNvbmRpdGlvbnMKICAgICAgICAgICAgZW50cnkucmVzb3VyY2UuZXh0ZW5zaW9uLmZvckVhY2goKGVsZW1lbnQpID0+IHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHBvc2l0aW9uIG9mIHRoZSBleHRlbnNpb25bMV0gaXMgY29ycmVjdAogICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuZXh0ZW5zaW9uWzFdLnVybCA9PSAiY29uY2VwdCIpIHsKICAgICAgICAgICAgICAgICAgICAvLyBTZWFyY2ggdGhyb3VnaCB0aGUgZGlmZmVyZW50IHRlcm1pbm9sb2dpZXMgdGhhdCBtYXkgYmUgYXZhaWJsZSB0byBjaGVjayBpbiB0aGUgY29uZGl0aW9uCiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuZXh0ZW5zaW9uWzFdLnZhbHVlQ29kZWFibGVSZWZlcmVuY2UuY29uY2VwdCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5leHRlbnNpb25bMV0udmFsdWVDb2RlYWJsZVJlZmVyZW5jZS5jb25jZXB0LmNvZGluZy5mb3JFYWNoKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvZGluZykgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJFeHRlbnNpb246ICIgKyBlbGVtZW50LmV4dGVuc2lvblswXS52YWx1ZVN0cmluZyArICI6IiArIGNvZGluZy5jb2RlICsgIiAtICIgKyBjb2Rpbmcuc3lzdGVtKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb2RlIGlzIGluIHRoZSBsaXN0IG9mIGNhdGVnb3JpZXMgdG8gc2VhcmNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFscyhhcnJheU9mSW5ncmVkaWVudENvZGVzLCB7IGNvZGU6IGNvZGluZy5jb2RlLCBzeXN0ZW06ICIiIH0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjYXRlZ29yeSBpcyBhbHJlYWR5IGluIHRoZSBsaXN0IG9mIGNhdGVnb3JpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcy5wdXNoKGVsZW1lbnQuZXh0ZW5zaW9uWzBdLnZhbHVlU3RyaW5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9KTsKCiAgICBpZiAoY29tcG9zaXRpb25zID09IDApIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBlUEk6IG5vIGNhdGVnb3J5ICJDb21wb3NpdGlvbiIgZm91bmQnKTsKICAgIH0KCiAgICBpZiAoY2F0ZWdvcmllcy5sZW5ndGggPT0gMCkgewogICAgICAgIHJldHVybiBodG1sRGF0YTsKICAgIH0KICAgIAogICAgLy9Gb2N1cyAoYWRkcyBoaWdobGlnaHQgY2xhc3MpIHRoZSBodG1sIGFwcGx5aW5nIGV2ZXJ5IGNhdGVnb3J5IGZvdW5kCiAgICByZXR1cm4gYXdhaXQgYW5ub3RhdGVIVE1Mc2VjdGlvbihjYXRlZ29yaWVzLCAiaGlnaGxpZ2h0Iik7Cn07CgpsZXQgYW5ub3RhdGlvblByb2Nlc3MgPSAobGlzdE9mQ2F0ZWdvcmllcywgZW5oYW5jZVRhZywgZG9jdW1lbnQsIHJlc3BvbnNlKSA9PiB7CiAgICBsaXN0T2ZDYXRlZ29yaWVzLmZvckVhY2goKGNoZWNrKSA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmluY2x1ZGVzKGNoZWNrKSkgewogICAgICAgICAgICBsZXQgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNoZWNrKTsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgZWxlbWVudHNbaV0uY2xhc3NMaXN0LmFkZChlbmhhbmNlVGFnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdLnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5pbm5lckhUTUw7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiUmVzcG9uc2U6ICIgKyByZXNwb25zZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiUmVzcG9uc2U6ICIgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MKTsKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIGlmIChyZXNwb25zZSA9PSBudWxsIHx8IHJlc3BvbnNlID09ICIiKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAiQW5ub3RhdGlvbiBwcm9jY2VzcyBmYWlsZWQ6IFJldHVybmVkIGVtcHR5IG9yIG51bGwgcmVzcG9uc2UiCiAgICAgICAgKTsKICAgICAgICAvL3JldHVybiBodG1sRGF0YQogICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygiUmVzcG9uc2U6ICIgKyByZXNwb25zZSk7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgfQp9CgpsZXQgYW5ub3RhdGVIVE1Mc2VjdGlvbiA9IGFzeW5jIChsaXN0T2ZDYXRlZ29yaWVzLCBlbmhhbmNlVGFnKSA9PiB7CiAgICBsZXQgcmVzcG9uc2UgPSBodG1sRGF0YTsKICAgIGxldCBkb2N1bWVudDsKCiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICBsZXQganNkb20gPSBhd2FpdCBpbXBvcnQoImpzZG9tIik7CiAgICAgICAgbGV0IHsgSlNET00gfSA9IGpzZG9tOwogICAgICAgIGxldCBkb20gPSBuZXcgSlNET00oaHRtbERhdGEpOwogICAgICAgIGRvY3VtZW50ID0gZG9tLndpbmRvdy5kb2N1bWVudDsKICAgICAgICByZXR1cm4gYW5ub3RhdGlvblByb2Nlc3MobGlzdE9mQ2F0ZWdvcmllcywgZW5oYW5jZVRhZywgZG9jdW1lbnQsIHJlc3BvbnNlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7CiAgICAgICAgcmV0dXJuIGFubm90YXRpb25Qcm9jZXNzKGxpc3RPZkNhdGVnb3JpZXMsIGVuaGFuY2VUYWcsIGRvY3VtZW50LCByZXNwb25zZSk7CiAgICB9Cn07CgpsZXQgZXF1YWxzID0gKGFycmF5LCBvYmplY3QpID0+IHsKICAgIHJldHVybiBhcnJheS5zb21lKChlbGVtZW50KSA9PiB7CiAgICAgICAgcmV0dXJuIChlbGVtZW50LmNvZGUgPT09IG9iamVjdC5jb2RlKSAmJiAoZWxlbWVudC5zeXN0ZW0gPT09IG9iamVjdC5zeXN0ZW0pOwogICAgfSk7Cn0KCnJldHVybiB7CiAgICBlbmhhbmNlOiBlbmhhbmNlLAogICAgZ2V0U3BlY2lmaWNhdGlvbjogZ2V0U3BlY2lmaWNhdGlvbiwKfTsK"
    }
  ]
}
